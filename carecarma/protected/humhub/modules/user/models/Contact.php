<?php

namespace humhub\modules\user\models;

use Yii;
use humhub\libs\GCM;
use humhub\libs\Push;
use yii\log\Logger;

/**
 * This is the model class for table "contact".
 *
 * @property integer $contact_id
 * @property string $contact_first
 * @property string $contact_last
 * @property string $contact_mobile
 * @property string $contact_email
 * @property string $nickname
 * @property integer $user_id
 * @property integer $contact_user_id
 * @property integer $linked
 * @property string $relation
 * @property string $device_phone
 * @property string $home_phone
 * @property string $work_phone
 */
class Contact extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'contact';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['contact_first', 'contact_last'], 'required', 'on' => 'editContact'],
            [['contact_mobile','device_phone','home_phone','work_phone'], 'number'],
            [['contact_email'], 'email'],
            [['user_id', 'contact_user_id', 'linked'], 'integer'],
            [['contact_first', 'contact_last', 'contact_mobile', 'nickname', 'relation','device_phone','home_phone','work_phone'], 'string', 'max' => 255],
            [['contact_email'], 'string', 'max' => 100]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'contact_first' => Yii::t('UserModule.models_Contact', 'First Name'),
            'contact_last' => Yii::t('UserModule.models_Contact', 'Last Name'),
            'contact_mobile' => Yii::t('UserModule.models_Contact', 'Mobile#'),
            'device_phone' => Yii::t('UserModule.models_Contact', 'Device Phone#'),
            'home_phone' => Yii::t('UserModule.models_Contact', 'Home#'),
            'work_phone' => Yii::t('UserModule.models_Contact', 'Work#'),
            'contact_email' => Yii::t('UserModule.models_Contact', 'Email'),
            'nickname' => Yii::t('UserModule.models_Contact', 'Nickname'),
            'user_id' => Yii::t('UserModule.models_Contact', 'User ID'),
            'relation' => Yii::t('UserModule.models_Contact', 'Relation'),
            'contact_user_id' => Yii::t('UserModule.models_Contact', 'contact ID'),
        ];
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios();
        $scenarios['editContact'] = ['contact_first', 'contact_last', 'contact_mobile', 'home_phone', 'work_phone', 'contact_email', 'nickname'];
        $scenarios['linkContact'] = ['user_id', 'contact_user_id', 'linked'];
        return $scenarios;
    }

    public function behaviors()
    {
        return array(
            \humhub\modules\user\behaviors\ContactLink::className()
        );

    }

    public function getUser()
    {
        return $this->hasOne(\humhub\modules\user\models\User::className(), ['id' => 'contact_user_id']);
    }

    public function beforeSave($insert)
    {
        if ($insert) {

            if ($this->contact_mobile == null) {
                $this->contact_mobile = '';
            }
            if ($this->device_phone == null) {
                $this->device_phone = '';
            }
            if ($this->home_phone == null) {
                $this->home_phone = '';
            }
            if ($this->work_phone == null) {
                $this->work_phone = '';
            }
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function getAddPush() {
        return [
            'type' => 'contact,add',
            'contact_id' => $this->contact_id,
            'contact_first' => $this->contact_first,
            'contact_last' => $this->contact_last,
            'contact_mobile' => $this->contact_mobile,
            'contact_email' => $this->contact_email,
            'nickname' => $this->nickname,
            'user_id' => $this->user_id,
            'contact_user_id' => $this->contact_user_id,
            'relation' => $this->relation,
            'home_phone' => $this->home_phone,
            'work_phone' => $this->work_phone
        ];
    }

    public function getDeletePush() {
        return [
            'type' => 'contact,delete',
            'user_id' => $this->user_id,
            'contact_id' => $this->contact_id,
            'contact_user_id' => $this->contact_user_id
        ];
    }

    public function getUpdatePush() {
        return [
            'type' => 'contact,update',
            'contact_id' => $this->contact_id,
            'contact_first' => $this->contact_first,
            'contact_last' => $this->contact_last,
            'contact_mobile' => $this->contact_mobile,
            'contact_email' => $this->contact_email,
            'nickname' => $this->nickname,
            'user_id' => $this->user_id,
            'contact_user_id' => $this->contact_user_id,
            'relation' => $this->relation,
            'home_phone' => $this->home_phone,
            'work_phone' => $this->work_phone
        ];
    }


    public function notifyDevice($data) {

        if ($data == 'add') {
            $user = User::findOne(['id' => $this->user_id]);
            if ($user->device_id != null){
                $device = Device::findOne(['device_id' => $user->device_id]);
                if ($device->gcmId != null){
                    $gcm = new GCM();
                    $gcm_registration_id = $device->gcmId;
                    $gcm->send($gcm_registration_id, $this->getAddPush());

                }
            }
        }

        if ($data == 'delete') {
            $user = User::findOne(['id' => $this->user_id]);
            if ($user->device_id != null){
                $device = Device::findOne(['device_id' => $user->device_id]);
                if ($device->gcmId != null){
                    $gcm = new GCM();
                    $gcm_registration_id = $device->gcmId;
                    $gcm->send($gcm_registration_id, $this->getDeletePush());

                }
            }
        }


        if ($data == 'update') {
            $user = User::findOne(['id' => $this->user_id]);
            if ($user->device_id != null){
                $device = Device::findOne(['device_id' => $user->device_id]);
                if ($device->gcmId != null){
                    $gcm = new GCM();
                    $gcm_registration_id = $device->gcmId;
                    $gcm->send($gcm_registration_id, $this->getUpdatePush());

                }
            }
        }



//        $user = User::findOne(['id' => $this->user_id]);
//        if ($user->device_id != null){
//            $device = Device::findOne(['device_id' => $user->device_id]);
//            if ($device->gcmId != null){
//                $gcm = new GCM();
////                $push = new Push();
//
//                $push->setTitle('contact');
//                $push->setData($data);
//
//                $gcm_registration_id = $device->gcmId;
//
//                $gcm->send($gcm_registration_id, $push->getPush());
//
//            }
//        }
    }

//    public static function notify($contact_list)
//    {
//
//        $gcm = new GCM();
//        $user = User::findOne(['id' => $contact_list['data'][0]['user_id']]);
//        $device = Device::findOne(['id' => $user->device_id]);
//        $gcm_id = $device->gcmId;
////        Yii::getLogger()->log(print_r($gcm_id,true),yii\log\Logger::LEVEL_INFO,'MyLog');
//
////        Yii::getLogger()->log(print_r(json_encode($contact_list),true),yii\log\Logger::LEVEL_INFO,'MyLog');
//        $gcm->send($gcm_id, json_encode($contact_list));
//
//
//    }



}
