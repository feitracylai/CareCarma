<?php

namespace humhub\modules\reminder\models;

use humhub\libs\GCM;
use humhub\modules\user\models\Device;
use Yii;
use yii\log\Logger;

/**
 * This is the model class for table "reminder_device_time".
 *
 * @property integer $id
 * @property integer $reminder_id
 * @property string $time
 * @property integer $repeat
 * @property string $date
 * @property string $day
 */
class ReminderDeviceTime extends \yii\db\ActiveRecord
{
    const REMIND_ONCE = 0;
    const REMIND_DAY = 1;
    const REMIND_EVERYDAY =2;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'reminder_device_time';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['time'], 'required'],
            [['reminder_id', 'repeat'], 'integer'],
            [['time', 'date', 'day'], 'string'],

            ['date', 'required', 'when' => function($model){
                return $model->repeat == 0;
            }],
            ['day', 'required', 'when' => function($model){
                return $model->repeat == 1;
            }],
        ];
    }

//    public function beforeValidate()
//    {
//        Yii::getLogger()->log($this->repeat, Logger::LEVEL_INFO, 'MyLog');
//        return parent::beforeValidate(); // TODO: Change the autogenerated stub
//    }


    public function beforeSave($insert)
    {
        if ($this->repeat == 0){
            $this->day = '';
        } elseif ($this->repeat == 1){
            $this->date = '';
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
//        Yii::getLogger()->log($changedAttributes, Logger::LEVEL_INFO, 'MyLog');
            $reminder = ReminderDevice::findOne(['id' => $this->reminder_id]);
            $devices = Device::findAll(['user_id' => $reminder->user_id, 'activate' => 1]);
            if (count($devices) != 0)
            {


                $data = array();
                $data['type'] = 'reminder,add';


                $data['id'] = $this->id;

                $data['title'] = $reminder->title;
                $data['description'] = $reminder->description;
                //$data['send'] = $reminder->send->firstname;

                $data['hour'] = date_format(date_create($this->time), "H");
                $data['minutes'] = date_format(date_create($this->time), "i");

                if ($this->repeat == 0){

                    $data['repeat'] = $this::REMIND_ONCE;
                    $data['date'] = date_format(date_create($this->date), "d");
                    $data['month'] = date_format(date_create("01:46 PM"), "m");
                    $data['year'] = date_format(date_create("01:46 PM"), "Y");


                } elseif ($this->repeat == 1){
                    /******if it is everyday**********/
                    if ($this->day == 0){
                        $data['repeat'] = $this::REMIND_EVERYDAY;
                    } else {
                        $data['repeat'] = $this::REMIND_DAY;
                        $data['day'] = $this->day;
                    }

                }

                foreach ($devices as $device)
                {
                    $gcm = new GCM();
                    $gcm->send($device->gcmId, $data);
                    //json_decode($result, true) is an array;
                }
                $reminder->status = ReminderDevice::STATUS_SENT;
                $reminder->save();
            }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'reminder_id' => 'Reminder ID',
            'time' => 'Time',
            'repeat' => 'Repeat',
            'date' => 'Date',
            'day' => 'Day',
        ];
    }

    /**
     * @return string
     */
    public function getReminder()
    {
        return $this->hasOne(ReminderDevice::className(), ['id' => 'reminder_id']);
    }

    public function delete()
    {
        $devices = Device::findAll(['user_id' => $this->reminder->user_id, 'activate' => 1]);
        if (count($devices) != 0){
            $data = array(
                'type' => 'reminder,delete',
                'id' => $this->id
            );


            foreach ($devices as $device){
                $gcm = new GCM();
                $gcm->send($device->gcmId, $data);
            }
        }


        return parent::delete(); // TODO: Change the autogenerated stub
    }
}
